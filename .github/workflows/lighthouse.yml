name: check lighthouse

on:
  pull_request:
    types: [opened]

jobs:
  lighthouse:
    name: lighthouse
    runs-on: ubuntu-latest
    steps:
      - name: checkouse source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup dependencies
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: install dependencies
        run: npx npm install

      - name: build
        run: npx npm run build

      - name: lighthouse monitoring
        run: npx lhci autorun

      - name: record lighthouse report
        id: format_lighthouse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const results = JSON.parse(fs.readFileSync("/home/runner/work/openTelementryWithNextjs/openTelementryWithNextjs/lhci_reports/manifest.json"));

            results.forEach(async (result) => {
              const { summary, jsonPath } = result;
              const { audits } = details;

              const details = JSON.parse(fs.readFileSync(jsonPath));
              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );

              # Ï†êÏàòÍ∞Ä ÏÉâÏÉÅÏúºÎ°ú Íµ¨Î∂ÑÎêòÎäî Î∞©Ïãù (https://web.dev/performance-scoring/#color-coding)
              const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

              const comment = [
                `‚ö°Ô∏è Lighthouse report!`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                { ... }
              ].join("\n");

              const detail = [
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(
                  audits["first-contentful-paint"].score * 100
                )} First Contentful Paint | ${
                  audits["first-contentful-paint"].displayValue
                } |`,
                { ... }
              ].join("\n");
              comments += comment + "\n" + detail + "\n";


              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comments
              });   
            });
