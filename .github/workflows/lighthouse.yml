name: check lighthouse

on:
  pull_request:
    types: [opened]
  push:
    branches:
      - lighthouse-test

jobs:
  lighthouse:
    name: lighthouse
    runs-on: ubuntu-latest
    steps:
      - name: checkouse source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup dependencies
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: install dependencies
        run: npx npm install

      - name: build
        run: npx npm run build

      - name: lighthouse monitoring
        run: npx lhci autorun

      - name: record lighthouse report
        id: format_lighthouse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const results = JSON.parse(fs.readFileSync("/home/runner/work/openTelementryWithNextjs/openTelementryWithNextjs/lhci_reports/manifest.json"));

            let comments = "";

            results.forEach(async (result) => {
              const { summary, jsonPath } = result;

              const details = JSON.parse(fs.readFileSync(jsonPath));

              const { audits } = details;
             
              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );

              const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

              const comment = [
                `‚ö°Ô∏è Lighthouse report ${index}`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                `| ${score(summary.accessibility)} Accessibility | ${summary.accessibility} |`,
                `| ${score(summary['best-practices'])} Best practices | ${summary['best-practices']} |`,
                `| ${score(summary.seo)} SEO | ${summary.seo} |`,
                `| ${score(summary.pwa)} PWA | ${summary.pwa} |`,
                `\n`,
              ].join("\n");

              comments += comment + "\n";
            });


            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comments
            })
